<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1254.v3f64639b_11dd" name="helm_application_install">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CB_TUMBLEBUG_URI</name>
          <description>Tumblebug API URL</description>
          <defaultValue>http://13.125.199.35:1323/tumblebug</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>NAMESPACE</name>
          <description>Namespace ID</description>
          <defaultValue>ns01</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>CLUSTERNAME</name>
          <description>K8s Cluster Name</description>
          <defaultValue>cluster01</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TUMBLEBUG_USER</name>
          <description>Tumblebug User ID</description>
          <defaultValue>default</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
        <hudson.model.PasswordParameterDefinition>
          <name>TUMBLEBUG_PASSWORD</name>
          <description>Tumblebug User Password</description>
          <defaultValue>default</defaultValue>
        </hudson.model.PasswordParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>HELM_CHARTS</name>
          <description>Helm Charts to Install (comma-separated)</description>
          <defaultValue>nginx,grafana</defaultValue>
          <trim>true</trim>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3659.v582dc37621d8">
    <script>
<![CDATA[
import groovy.json.JsonSlurper

def kubeconfig = ""

pipeline {
    agent any
    
    stages {
        stage('Check Tumblebug Connection') {
            steps {
                script {
                    try {
                        def response = sh(script: """
                            curl -s -X GET '${params.CB_TUMBLEBUG_URI}/readyz' \
                            --user '${params.TUMBLEBUG_USER}:${params.TUMBLEBUG_PASSWORD}' \
                            -H 'accept: application/json'
                        """, returnStdout: true).trim()
                        def json = new JsonSlurper().parseText(response)
                        if (json.message != "CB-Tumblebug is ready") {
                            error "Tumblebug is not ready: ${json.message}"
                        }
                        echo "Tumblebug connection successful"
                    } catch (Exception e) {
                        error "Failed to connect to Tumblebug: ${e.message}"
                    }
                }
            }
        }

        stage('Get K8s Cluster Info') {
            steps {
                script {
                    try {
                        def response = sh(script: """
                            curl -s -X GET '${params.CB_TUMBLEBUG_URI}/ns/${params.NAMESPACE}/k8scluster/${params.CLUSTERNAME}' \
                            --user '${params.TUMBLEBUG_USER}:${params.TUMBLEBUG_PASSWORD}' \
                            -H 'accept: application/json'
                        """, returnStdout: true).trim()
                        def json = new JsonSlurper().parseText(response)
                        kubeconfig = json.accessInfo.kubeconfig
                        writeFile file: 'kubeconfig', text: kubeconfig
                        sh "chmod 600 kubeconfig"
                    } catch (Exception e) {
                        error "Failed to get K8s cluster info: ${e.message}"
                    }
                }
            }
        }

        stage('Install Helm Charts') {
            steps {
                script {
                    def helmCommands = [
                        'nginx': "helm install --generate-name oci://registry-1.docker.io/bitnamicharts/nginx",
                        'grafana': "helm repo add grafana https://grafana.github.io/helm-charts && helm repo update && helm install --generate-name grafana/grafana",
                        'prometheus': "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts && helm repo update && helm install --generate-name prometheus-community/prometheus",
                        'mariadb': "helm install --generate-name oci://registry-1.docker.io/bitnamicharts/mariadb",
                        'redis': "helm install --generate-name oci://registry-1.docker.io/bitnamicharts/redis",
                        'tomcat': "helm install --generate-name oci://registry-1.docker.io/bitnamicharts/tomcat"
                    ]
                    
                    def charts = params.HELM_CHARTS.split(',')
                    
                    charts.each { chart ->
                        chart = chart.trim()
                        if (helmCommands.containsKey(chart)) {
                            echo "Installing ${chart}..."
                            sh """
                                docker run --rm -v ${WORKSPACE}/kubeconfig:/root/.kube/config alpine/helm:3.9.0 \
                                ${helmCommands[chart]}
                            """
                        } else {
                            echo "Warning: ${chart} is not a recognized chart. Skipping."
                        }
                    }
                }
            }
        }

        stage('Verify Installations') {
            steps {
                script {
                    sh """
                        docker run --rm -v ${WORKSPACE}/kubeconfig:/root/.kube/config bitnami/kubectl:latest \
                        get pods,services --all-namespaces
                    """
                }
            }
        }

        stage('Check Services Status') {
            steps {
                script {
                    def charts = params.HELM_CHARTS.split(',')
                    charts.each { chart ->
                        chart = chart.trim()
                        def serviceCheck = sh(script: """
                            docker run --rm -v ${WORKSPACE}/kubeconfig:/root/.kube/config bitnami/kubectl:latest \
                            get services --all-namespaces | grep ${chart}
                        """, returnStatus: true)
                        if (serviceCheck == 0) {
                            echo "${chart} service is running."
                        } else {
                            echo "Warning: ${chart} service is not detected. Please check the installation."
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            sh "rm -f ${WORKSPACE}/kubeconfig"
        }
        success {
            echo "Helm charts installation and verification completed successfully!"
        }
        failure {
            echo "Helm charts installation or verification failed. Please check the logs for details."
        }
    }
}
]]>
    </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>